buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.1+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '0.1.0'
group = 'com.example.pixelmon'
archivesBaseName = 'pixelmon-level-cap'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

minecraft {
    mappings channel: 'official', version: '1.16.5'

    runs {
        client {
            workingDirectory project.file('run')
            mods {
                lvlcap {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            mods {
                lvlcap {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven { url = 'https://maven.minecraftforge.net' }
    mavenCentral()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.39'
}

sourceSets {
    main {
        resources {
            srcDir 'src/generated/resources'
        }
    }
}

jar {
    manifest {
        attributes([
                'Specification-Title'   : 'Pixelmon Level Cap',
                'Specification-Vendor'  : 'sidemodsrerforged',
                'Specification-Version' : '1',
                'Implementation-Title'  : project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor' : 'sidemodsrerforged',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

def jarTask = tasks.named('jar', org.gradle.api.tasks.bundling.Jar)
def releaseJarName = jarTask.flatMap { jar ->
    jar.archiveFileName.map { name -> name.replaceFirst(/\.jar$/, '-release.jar') }
}

tasks.named('reobfJar').configure { reobf ->
    doLast {
        if (reobf.outputs.files.isEmpty()) {
            return
        }
        def libsDir = layout.buildDirectory.dir('libs').get().asFile
        def originalName = jarTask.get().archiveFileName.get()
        def renamed = releaseJarName.get()
        project.copy {
            from reobf.outputs.files
            into libsDir
            rename { fileName -> fileName == originalName ? renamed : fileName }
        }
        project.logger.lifecycle("Release jar available at ${new File(libsDir, renamed)}")
    }
}
